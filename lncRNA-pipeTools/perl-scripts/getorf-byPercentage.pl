#!/usr/bin/perl
# Programmer: Elton Vasconcelos (17/Apr/2015)
# Usage: perl getorf-byPercentage.pl [emboss_getorf_output.fasta] [user_defined_%_cutoff] >outfile.fasta
########################################################################################################
### NOTE-1: Before running the getorf program from EMBOSS package, 
# one must also run readseq.jar to get the nucleotide sequence length at the headline end of each sequence "\d+ bp$"
# The following are examples of valid headlines:
#>c4_g1_i1_1 [47 - 142] len=232 path=[22:0-59 21:60-231] 232 bp
#>c12_g2_i1_1 [53 - 142] len=221 path=[344:0-220] 221 bp
#>c31_g1_i1_1 [5 - 118] len=313 path=[1:0-66 68:67-67 69:68-312] 313 bp
### NOTE-2: Argument 2 must be an integer

if (@ARGV != 2) {
die ("**Error**\nThe cmd line must contain 2 arguments:\n\$perl getorf-byPercentage.pl [emboss_getorf_output.fasta] [user_defined_%_cutoff] >outfile.fasta\nRead script's initial commented lines for a better explanation\n");
}

open (INFILE, "$ARGV[0]") or die ("Can't open file $ARGV[0]!\n");
my $line = <INFILE>;
chomp($line);
my ($orf_coord1, $orf_coord2, $orf_length, $seq_length, $m);

while ($line ne "") {
    $m = 0;
    if ($line =~ m/^>/) {
        if ($line =~ m/\[\d+ \- \d+\]/) {
            $orf_coord1 = $&;
            $orf_coord2 = $orf_coord1;
            $orf_coord1 =~ s/\[//g;
            $orf_coord1 =~ s/ .*//g;
            $orf_coord2 =~ s/\]//g;
            $orf_coord2 =~ s/\[\d+ \- //g;
            $orf_length = $orf_coord2 - $orf_coord1 + 1;
        }
        else {
            print STDERR ("ERROR: Wrong file format! The input file must be generated by the EMBOSS_getorf program.\nRead initial commented lines on this script.\n");
        }
        if ($line =~ m/\d+ bp$/) {
            $seq_length =  $&;
            $seq_length =~ s/ bp//g;
        }
        else {
            print STDERR ("ERROR: The sequence headlines must end with the regexp \\d+ bp$\n. Please read the initial commented lines on this script.\n");
        }
        if (($orf_length / $seq_length) * 100 >= $ARGV[1]) {
            print ("$line\n");
            $line = <INFILE>;
            chomp($line);
            until ($line =~ m/^>/ || $line eq "") {    #Priting the sequence content of the headline that has passed through the % cutoff
                print ("$line\n");
                $line = <INFILE>;
                chomp($line);
            }
            $m = 1;
        }
    }
    if ($m == 0) {    #The sequence has not passed through the % cutoff
        $line = <INFILE>;
        chomp($line);
    }
}